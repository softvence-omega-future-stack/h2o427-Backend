version: '3.8'

# Production Docker Compose Configuration

services:
  # PostgreSQL Database with optimized settings
  db:
    image: postgres:15-alpine
    container_name: h2o427_db_prod
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${dbname}
      - POSTGRES_USER=${user}
      - POSTGRES_PASSWORD=${password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    # Security: Do not expose database port to host in production
    # ports:
    #   - "5432:5432"

  # Django Web Application (Production)
  web:
    build: .
    container_name: h2o427_web_prod
    command: >
      sh -c "
        python manage.py migrate --noinput &&
        python manage.py collectstatic --noinput &&
        gunicorn --bind 0.0.0.0:8000 
                 --workers 4 
                 --threads 2
                 --worker-class gthread
                 --max-requests 1000
                 --max-requests-jitter 50
                 --timeout 30
                 --access-logfile -
                 --error-logfile -
                 --log-level info
                 background_check.wsgi:application
      "
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=False
      - DATABASE_URL=postgresql://${user}:${password}@db:5432/${dbname}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
      - STRIPE_TEST_PUBLIC_KEY=${STRIPE_TEST_PUBLIC_KEY}
      - STRIPE_TEST_SECRET_KEY=${STRIPE_TEST_SECRET_KEY}
      - STRIPE_TEST_ENDPOINT_SECRET=${STRIPE_TEST_ENDPOINT_SECRET}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_FROM_NUMBER=${TWILIO_FROM_NUMBER}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - FRONTEND_URL=${FRONTEND_URL}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend
    restart: always
    # Security: Do not expose web port to host in production, use nginx
    # expose:
    #   - "8000"

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: h2o427_nginx_prod
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
      - ./ssl:/etc/nginx/ssl:ro  # SSL certificates directory
    ports:
      - "80:80"
      - "443:443"  # HTTPS
    depends_on:
      - web
    networks:
      - backend
    restart: always

volumes:
  postgres_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local

networks:
  backend:
    driver: bridge
